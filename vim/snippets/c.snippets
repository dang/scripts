# main()
snippet main
	int
	main(int argc, char const* argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:SYMBOL}
	#endif /* $1 */
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper('_'.Filename('', 'UNTITLED').'_H')`}
	#define $1
	/**
	 * @file
	 * @brief ${2:brief}
	 */

	 ${3}

	#endif /* $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet el
	else {
		${1}
	}${2}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Switch
snippet switch
	switch (${1:/* var */}) {
	${2:/* code */}
	}
# Case
snippet case
	case ${1:/* case */}:
		${2:/* code */}
		break;
# Function
snippet fun
	${1:void}
	${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1', 'name')`}_t;
# Typdef enum
snippet tde
	typedef enum {
		${2:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned

# Doxygen function comment
snippet /**f
	/**
	 * @brief ${1:brief}
	 *
	 * ${5:long description}
	 *
	 * @param[in] ${2:parm}	${3:Parameter description}
	 * @return ${4:Return description}
	 */
# Doxygen group comment
snippet /**g
	/**
	 * @addtogroup ${1:groupname}
	 * @brief ${2:brief}
	 *
	 * ${3:long description}
	 * @{
	 */
	
	/** @} $1 */
# Doxygen structure comment
snippet /**s
	/**
	 * @brief ${1:brief}
	 *
	 * ${2:long description}
	 */
# Doxygen define comment
snippet /**d
	/**
	 * @def $1
	 * @brief ${2:brief}
	 */
	#define ${1:define} ${3:value}
# GTQ_FOREACH
snippet GTQF
	GTQ_FOREACH(${1:headp}, ${2:elemp}, ${3:link}) {
		${4:/* code */}
	}
# GTQ_FOREACH_SAFE
snippet GTQFS
	GTQ_FOREACH_SAFE(${1:headp}, ${2:elemp}, ${3:link}) {
		${4:/* code */}
	} GTQ_FOREACH_SAFE_END;

# bmalloc
snippet bma
	${1:var} = bmalloc(sizeof(*$1));
	if (!$1) {
		${2:error}
	}
