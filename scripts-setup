#!/bin/bash
#
# Setup or update an account with the scripts.
#
# Requires: git, sed
#

REPO="git://github.com/dang/scripts.git"
SCRIPTDIR="${HOME}/.scripts"

# Set usage output
USAGE="[-h |--help] [-f | --fixup] [<directory>]"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-f, --fixup\n\t\tFix up homedir for new links/copies
\t<directory>\n\t\tScripts directory. Defaults to ${SCRIPTDIR}"

# Standard functions
is_interactive() {
	case $- in
		*i*)
			# Don't die in interactive shells
			return 0
			;;
		*)
			return 1
			;;
	esac
}
can_die() {
	if (( BASH_SUBSHELL > 0 )); then
		return 0
	fi
	if ! is_interactive; then
		return 0
	fi
	return 1
}
die() {
	echo "Failed: $@"
	if [ ! -z "$(declare -F | grep "DFGcleanup")" ]; then
		DFGcleanup "$@"
	fi
	if can_die; then
		exit 1
	fi
}
usage() {
	local myusage;
	if [ -n "${USAGE}" ]; then
		myusage=${USAGE}
	else
		myusage="No usage given"
	fi
	if [ -n "$1" ]; then
		echo "$@"
	fi
	echo ""
	echo "Usage:"
	echo "`basename $0` ${myusage}"
	if [ -n "${LONGUSAGE}" ]; then
		echo -e "${LONGUSAGE}"
	fi
	exit 1
}

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o hf --long help,fixup -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage 
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		-f|--fixup) FIXUP="yes"; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

# Remaining arguments are in $1, $2, etc. as normal
if [ -n "${1}" ]; then
	if [ "$1" == "." ]; then
		SCRIPTDIR=${PWD}
	else
		SCRIPTDIR=$1
	fi
fi

# Array formats are: array["<targetpath>"] = "<file> [<file>...]"
#  Each entry is found in $SCRIPTDIR/cfg/<targetpath>/<file> and is installed into ${HOME}/<targetpath>/<file>

# These are items that should be symlinked to the scripts dir, so they're always up-to-date.
declare -A LNSET=(
	["."]=".ackrc .atoolrc .bashrc .cvsrc .face .gdbinit .gitignore .gvimrc .inputrc .lesskey .nvimrc .pentadactylrc .profile .tigrc .tmux.conf .toprc .vim .vimrc .vrapperrc .xinitrc" 
	[".cgdb"]="cgdbrc"
	[".config"]="awesome luakit"
	[".config/xfce4"]="terminal"
)

# These are copied, so that they can be locally modified
declare -A CPSET=(
	["."]=".gitconfig"
	[".ssh"]="config"
	[".bashrc.d/env"]="00defaults prompt  python-virtualenv  user-path"
	[".bashrc.d/actions"]="aliases"
)

# These have changed location and need to be moved
declare -A MVSET=(
	[".bashrc.d/00defaults"]=".bashrc.d/env/00defaults"
	[".bashrc.d/prompt"]=".bashrc.d/env/prompt"
	[".bashrc.d/python-virtualenv"]=".bashrc.d/env/python-virtualenv"
	[".bashrc.d/user-path"]=".bashrc.d/env/user-path"
	[".bashrc.d/aliases"]=".bashrc.d/actions/aliases"
)

WANTPROGS="atool tmux"

umask 0077

function cmd_exists {
	which $1 > /dev/null 2>&1
	if [ "$?" == "1" ]; then
		die "You don't have $1 installed, sorry"
	fi
}

# checkexists ASSOC_ARRAY || die "failed"
#
# Check if the entries in the array exist
#
# Note: do *not* dereference the array in the call
function checkexists {
	local _str_arr="$(declare -p $1)"
	eval "local -A array=${_str_arr#*=}"
	(
	for k in "${!array[@]}"; do
		for f in ${array[$k]}; do
			local base="$k/$f"
			if [ "$k" == "." ]; then
				# no extra ./
				base="$f"
			fi
			[ -a "${HOME}/${base}" ] && die "${HOME}/${base} exists; not continuing"
		done
	done
	exit 0
	)
	return $?
}


# install ASSOC_ARRAY [$copy]
#
# Install the entries in the array.  If copy is given and not empty, copy them.
# Otherwise, symlink them
#
# Note: do *not* dereference the array in the call
function install {
	local _str_arr="$(declare -p $1)"
	eval "local -A array=${_str_arr#*=}"
	local copy=$2
	(
	for k in "${!array[@]}"; do
		for f in ${array[$k]}; do
			local base="$k/$f"
			if [ "$k" == "." ]; then
				# no extra ./
				base="$f"
			fi
			local basedir=$(dirname $base{})
			mkdir -p "${HOME}/${basedir}"
			if [ -z "${copy}" ]; then
				if [ -n "${FIXUP}" ]; then
					rm "${HOME}/${base}"
				fi
				ln -s "${HOME}/.scripts/cfg/${base}" "${HOME}/${base}" || die "failed to link ${base}"
			else
				if [ -n "${FIXUP}" ]; then
					# Skip existing files
					if [ -e "${HOME}/${base}" ]; then
						continue
					fi
				fi
				cp -a "${HOME}/.scripts/cfg/${base}" "${HOME}/${base}" || die "failed to copy ${base}"
			fi
		done
	done
	)
	return $?
}

cmd_exists sed

if [ -z "${FIXUP}" ]; then
	# Check for conflicts
	checkexists LNSET || die "Not overriting symlink files"
	checkexists CPSET || die "Not overriting copy files"

	if [ ! -d "${SCRIPTDIR}/.git" ]; then
		SAVEDIR=${PWD}
		cmd_exists git
		cd $(dirname "${SCRIPTDIR}")
		git clone ${REPO} $(basename ${SCRIPTDIR})
		cd $(basename "${SCRIPTDIR}")
		git submodule update --init --recursive
		cd "${SAVEDIR}"
	fi
fi

if [ ! -d "${SCRIPTDIR}/.git" ]; then
	echo "Failed to clone scripts repo from ${REPO}"
	exit 2
fi

cd ${HOME}
# Set up .scripts symlink
ln -s ${SCRIPTDIR} .scripts
if [ -h "${SCRIPTDIR}/.scripts" ]; then
	# installed into .scripts; remove extra symlink
	rm "${SCRIPTDIR}/.scripts"
fi

# Special setup: fix moved files
if [ -n "${FIXUP}" ]; then
	for k in "${!MVSET[@]}"; do
		for f in ${MVSET[$k]}; do
			if [ -e "${HOME}/${k}" ]; then
				basedir=$(dirname $f{})
				mkdir -p "${HOME}/${basedir}"
				mv "${HOME}/${k}" "${HOME}/${f}"
			fi
		done
	done
fi

# Install files
install LNSET || die "Failed to install symlink files"
install CPSET "copy" || die "Failed to install copy files"

# Set up less
lesskey

# Initialize the flavor
export SCRIPTS_SETUP="yes"
. ${SCRIPTDIR}/bashrc.d/env/flavor
if [ -f "${SCRIPTDIR}/bashrc.d/flavor/${FLAVOR}/setup" ]; then
	. ${SCRIPTDIR}/bashrc.d/flavor/${FLAVOR}/setup
fi

# Look to see if my desired programs are installed
for i in ${WANTPROGS}; do
	which $i > /dev/null 2>&1
	if [ "$?" == "1" ]; then
		NEEDPROGS="$i ${NEEDPROGS}"
	fi
done

echo "Done."
echo "You need to edit ${HOME}/.bashrc.d/* for your your local settings"
if [ -n "${NEEDPROGS}" ]; then
	echo "Please install ${NEEDPROGS}"
fi
