#!/bin/bash
#
# Bump a package in an overlay
#

# Portage functions
source ${HOME}/.scripts/portage-functions.sh

#
# Local parameters
# tmp directory for extracting packages to look for deps
TMPDIR="/home/src/build"
# Remove old versions?
RMOLD="yes"
# Force VCS actions
FORCE="--force"

# Set usage output
USAGE="[-hbcCknsT][-p <portdir>] [-t <tmpdir>] [-d <distdir>]  [<basename> <old-version> <new-version>]"
LONGUSAGE="\t-h\tPrint this help message
\t-b\tBuild package.
\t-c\tCommit package when done.
\t-C\tView ChangeLog when done.
\t-k\tKeep old versions.
\t-n\tNo VCS interactions
\t-s\tSave KEYWORDS; don't make all arch ~arch
\t-T\tDon't run tests
\t-p <portdir>\tPORTDIR to act on (default ${PORTDIR})
\t-t <tmpdir>\tTMP directory to extract packages to (default ${TMPDIR})
\t-d <distdir>\tLocation distfiles are downloaded to (default ${DISTDIR})
\t<basename>\tName of package (\${P})
\t<old-version>\tOld package version (old \${PVR})
\t<new-version>\tNew package version (new \${PVR})
\tIf none of <basename> <old-version> <new-version> is given, ebump tries to guess what to bump"

# Standard functions
source ${HOME}/.scripts/functions.sh

# Parse arguments
while getopts ":hbcCknsp:d:t:T" option; do
	case ${option} in
		b ) BUILD="yes";;
		c ) COMMIT="yes";;
		C ) CHANGELOG="yes";;
		k ) RMOLD="no";;
		n ) VCS_FAKE="yes";;
		s ) SAVEARCH="yes";;
		T ) NOTESTS="no";;
		p ) PORTDIR=${OPTARG};;
		t ) TMPDIR=${OPTARG};;
		d ) DISTDIR=${OPTARG};;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
fi

if [ -z "$3" ]; then
	usage "You must give package information"
	exit
	# Try to guess...
	TMPNAME=$(/bin/ls *.ebuild)
	FOUND=no
	for i in ${TMPNAME}; do
		if [ "${FOUND}" != "no" ]; then
			usage "Could not get ebuild to bump; please specify"
		fi
		FOUND=$i
	done
	TMPNAME=$(basename ${FOUND} .ebuild)
	PN=$(splitname pn ${TMPNAME})
	OLD_PVR=$(splitname pvr ${TMPNAME})
	rev=$(splitname revision ${TMPNAME})
	if [ "${rev}" == "0" ]; then
		# No -r revision; bump the last number in version
		PV=$(splitname pv ${TMPNAME})
	else
		# bump -r
		((rev++))
		PVR="$(splitname pv ${TMPNAME})-r${rev}"
	fi
else
	PN=$1
	OLD_PVR=$2
	PVR=$3
fi

OLD_PF=${PN}-${OLD_PVR}
PF=${PN}-${PVR}
PV=${PVR/-r*/}
P=${PN}-${PV}
OLDEBUILD=${OLD_PF}.ebuild
OLDDIGEST=files/digest-${OLD_PF}
NEWEBUILD=${PF}.ebuild
NEWDIGEST=files/digest-${PF}
if [ -n "${DISPLAY}" ]; then
	VIM="gvim -f -geometry 177x47"
else
	VIM="vim"
fi

portcd ${PN}
EBUILDDIR=$(pwd)
port_category

# Sanity check old setup
[ -f ${OLDEBUILD} ] || die "${OLDEBUILD} doesn't exist"
if [ "${OLDDIGEST}" != "${NEWDIGEST}" ]; then
	[ -f ${OLDDIGEST} ] || die "${OLDDIGEST} doesn't exist"
fi

vcs_detect
vcs_update

# Source the ebuild to get MY_P if it exists
source ${OLDEBUILD}
echo ${OLDEBUILD}
echo ${MY_P}
if [ -z "${MY_P}" ]; then
	MY_P=${P}
fi

echo "In repo ${PORTDIR}:"
if [ "${RMOLD}" == "yes" ]; then
	echo "Removing ${OLDEBUILD} and ${OLDDIGEST}"
fi
echo "Adding ${NEWEBUILD} and ${NEWDIGEST}"

# Make ebuild change
if [ "${OLDEBUILD}" != "${NEWEBUILD}" ]; then
	if [ "${RMOLD}" == "yes" ]; then
		vcs_mv ${OLDEBUILD} ${NEWEBUILD}
		vcs_mv ${OLDDIGEST} ${NEWDIGEST}
	else
		vcs_cp ${OLDEBUILD} ${NEWEBUILD}
		vcs_cp ${OLDDIGEST} ${NEWDIGEST}
	fi
	if [ -z "${SAVEARCH}" ]; then
		ekeyword ~all ${NEWEBUILD} || die "ekeyword failed"
	fi
	if ! vcs_is_added Manifest; then
		vcs_add Manifest
	fi
fi

# digest new ebuild
ebuild ${NEWEBUILD} digest || die "digest failed"
[ -f ${NEWDIGEST} ] || die "${NEWDIGEST} doesn't exist"

# Open up the new ebuild and the configure.(in|ac) to check for new deps
cd ${TMPDIR} || die "No ${TMPDIR}"
[ -f ${DISTDIR}/${MY_P}.tar.bz2 ] && EXT="tar.bz2"
[ -f ${DISTDIR}/${MY_P}.tar.gz ] && EXT="tar.gz"
[ -f ${DISTDIR}/${MY_P}.tgz ] && EXT="tgz"
DIRNAME=$(duntarball ${DISTDIR}/${MY_P}.${EXT})
${VIM} -O ${EBUILDDIR}/${NEWEBUILD} ${DIRNAME}/configure.*
if [ -n "${CHANGELOG}" ]; then
	# Want the changelog
	CLTEMPFILE=$(tempfile)
	cp ${DIRNAME}/ChangeLog ${CLTEMPFILE}
	NTEMPFILE=$(tempfile)
	cp ${DIRNAME}/NEWS ${NTEMPFILE}
fi

rm -rf ${DIRNAME}
cd -

# Now re-digest in case the ebuild changed
ebuild ${NEWEBUILD} digest || die "digest failed"


if [ -n "${BUILD}" ]; then
	# We were told to build it
	if [ -z "${NOTESTS}" ]; then
		FEATURES=test emerge --oneshot "=${PORT_CATEGORY}/${PN}-${PVR}" || die "emerge failed"
	else
		emerge --oneshot "=${PORT_CATEGORY}/${PN}-${PVR}" || die "emerge failed"
	fi
fi

VCS_COMMITFILE=$(tempfile)
echo "Bump to ${PVR}" >> ${VCS_COMMITFILE}

if [ -n "${CHANGELOG}" ]; then
	${VIM} -O ${CLTEMPFILE} ${VCS_COMMITFILE} -c "sp ${NTEMPFILE}"
	rm ${CLTEMPFILE} ${NTEMPFILE}
fi

vcs_echangelog

# Re-digest
ebuild ${NEWEBUILD} digest || die "digest failed"

if [ -n "${COMMIT}" ]; then
	# We were told to commit it
	# Uses VCS_COMMITFILE
	echo "Press any key to commit (now would be a good time to test...)"
	read
	vcs_commit
fi

rm -f ${VCS_COMMITFILE}

# Tell user we're done
notify-send -t 0 "Done" "${PN} ${PVR}"
