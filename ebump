#!/bin/bash
#
# Bump a package in an overlay
#

#
# Local parameters
# tmp directory for extracting packages to look for deps
TMPDIR="/home/src/build"
# Dist file directory
DISTDIR="/home/portage/distfiles"
# PORTDIR
PORTDIR="/home/portage/overlays/gnome"
# Remove old versions?
RMOLD="yes"


# Set usage output
USAGE="[-hcbk][-p <portdir>] [-t <tmpdir>] [-d <distdir>]  <basename> <old-version> <new-version>"
LONGUSAGE="\t-h\tPrint this help message
\t-b\tBuild package.
\t-c\tCommit package when done.
\t-k\tKeep old versions.
\t-p <portdir>\tPORTDIR to act on (default ${PORTDIR})
\t-t <tmpdir>\tTMP directory to extract packages to (default ${TMPDIR})
\t-d <distdir>\tLocation distfiles are downloaded to (default ${DISTDIR})
\t<basename>\tName of package (\${P})
\t<old-version>\tOld package version (old \${PVR})
\t<new-version>\tNew package version (new \${PVR})"

# Standard functions
source ${HOME}/bin/scripts/functions.sh

# Parse arguments
while getopts ":hcbkp:d:t:" option; do
	case ${option} in
		c ) COMMIT="yes";;
		b ) BUILD="yes";;
		k ) RMOLD="no";;
		p ) PORTDIR=${OPTARG};;
		t ) TMPDIR=${OPTARG};;
		d ) DISTDIR=${OPTARG};;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
fi

# cd to a package location by name in a portdir
function gecd() {
	cd ${PORTDIR}/`PORTDIR=${PORTDIR} herdstat -f $*` || die "gecd failed"
}

if [ -z "$3" ]; then
	usage "Missing arguments"
fi

BASENAME=$1
OLDVER=$2
NEWVER=$3
OLDEBUILD=${BASENAME}-${OLDVER}.ebuild
OLDDIGEST=files/digest-${BASENAME}-${OLDVER}
NEWEBUILD=${BASENAME}-${NEWVER}.ebuild
NEWDIGEST=files/digest-${BASENAME}-${NEWVER}

gecd ${BASENAME}
EBUILDDIR=$(pwd)

# Sanity check old setup
[ -f ${OLDEBUILD} ] || die "${OLDEBUILD} doesn't exist"
[ -f ${OLDDIGEST} ] || die "${OLDDIGEST} doesn't exist"

vcs_detect
vcs_update

echo "In repo ${PORTDIR}:"
if [ "${RMOLD}" == "yes" ]; then
	echo "Removing ${OLDEBUILD} and ${OLDDIGEST}"
fi
echo "Adding ${NEWEBUILD} and ${NEWDIGEST}"

# Make ebuild change
cp ${OLDEBUILD} ${NEWEBUILD} || die "cp failed"
if [ "${RMOLD}" == "yes" ]; then
	vcs_rm ${OLDEBUILD} ${OLDDIGEST}
fi
ebuild ${NEWEBUILD} digest || die "digest failed"
[ -f ${NEWDIGEST} ] || die "${NEWDIGEST} doesn't exist"
# Add to VCS
vcs_add ${NEWEBUILD} ${NEWDIGEST}
echangelog "Bump to ${NEWVER}" || die "echangelog failed"

# Open up the new ebuild and the configure.(in|ac) to check for new deps
cd ${TMPDIR} || die "No ${TMPDIR}"
duntarball ${DISTDIR}/${BASENAME}-${NEWVER}.tar.bz2 || duntarball ${DISTDIR}/${BASENAME}-${NEWVER}.tar.gz
gvim -f -geometry 177x47 -O ${EBUILDDIR}/${NEWEBUILD} ${BASENAME}-${NEWVER}/configure.*
rm -rf ${BASENAME}-${NEWVER}
cd -

# Now re-digest in case the ebuild changed
ebuild ${NEWEBUILD} digest || die "digest failed"

if [ -n "${BUILD}" ]; then
	# We were told to build it
	sudo emerge ${BASENAME} || die "emerge failed"
fi

if [ -n "${COMMIT}" ]; then
	# We were told to commit it
	vcs_commit "Bump to ${NEWVER}"
fi

# Tell user we're done
notify-send -t 0 "Done" "${NEWEBUILD}"
