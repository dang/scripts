#!/bin/bash
#
# Bump a package in an overlay
#

#
# Fake functions to allow ebuild sourcing
function inherit() {
	true
}

#
# Local parameters
# tmp directory for extracting packages to look for deps
TMPDIR="/home/src/build"
# Dist file directory
DISTDIR="/home/portage/distfiles"
# PORTDIR
PORTDIR="/home/portage/overlays/gnome"
# Remove old versions?
RMOLD="yes"


# Set usage output
USAGE="[-hcbk][-p <portdir>] [-t <tmpdir>] [-d <distdir>]  <basename> <old-version> <new-version>"
LONGUSAGE="\t-h\tPrint this help message
\t-b\tBuild package.
\t-c\tCommit package when done.
\t-C\tView ChangeLog when done.
\t-k\tKeep old versions.
\t-p <portdir>\tPORTDIR to act on (default ${PORTDIR})
\t-t <tmpdir>\tTMP directory to extract packages to (default ${TMPDIR})
\t-d <distdir>\tLocation distfiles are downloaded to (default ${DISTDIR})
\t<basename>\tName of package (\${P})
\t<old-version>\tOld package version (old \${PVR})
\t<new-version>\tNew package version (new \${PVR})"

# Standard functions
source ${HOME}/bin/scripts/functions.sh

# Parse arguments
while getopts ":hcCbkp:d:t:" option; do
	case ${option} in
		c ) COMMIT="yes";;
		C ) CHANGELOG="yes";;
		b ) BUILD="yes";;
		k ) RMOLD="no";;
		p ) PORTDIR=${OPTARG};;
		t ) TMPDIR=${OPTARG};;
		d ) DISTDIR=${OPTARG};;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
fi

# cd to a package location by name in a portdir
function gecd() {
	cd ${PORTDIR}/`PORTDIR=${PORTDIR} herdstat -f $*` || die "gecd failed"
}

if [ -z "$3" ]; then
	usage "Missing arguments"
fi

PN=$1
OLD_PVR=$2
PVR=$3

OLD_PF=${PN}-${OLD_PVR}
PF=${PN}-${PVR}
PV=${PVR/-r*/}
P=${PN}-${PV}
OLDEBUILD=${OLD_PF}.ebuild
OLDDIGEST=files/digest-${OLD_PF}
NEWEBUILD=${PF}.ebuild
NEWDIGEST=files/digest-${PF}
if [ -n "${DISPLAY}" ]; then
	VIM="gvim -f -geometry 177x47"
else
	VIM="vim"
fi

gecd ${PN}
EBUILDDIR=$(pwd)

# Sanity check old setup
[ -f ${OLDEBUILD} ] || die "${OLDEBUILD} doesn't exist"
[ -f ${OLDDIGEST} ] || die "${OLDDIGEST} doesn't exist"

vcs_detect
vcs_update

# Source the ebuild to get MY_P if it exists
source ${OLDEBUILD}
echo ${OLDEBUILD}
echo ${MY_P}
if [ -z "${MY_P}" ]; then
	MY_P=${P}
fi

echo "In repo ${PORTDIR}:"
if [ "${RMOLD}" == "yes" ]; then
	echo "Removing ${OLDEBUILD} and ${OLDDIGEST}"
fi
echo "Adding ${NEWEBUILD} and ${NEWDIGEST}"

# Make ebuild change
if [ "${OLDEBUILD}" != "${NEWEBUILD}" ]; then
	cp ${OLDEBUILD} ${NEWEBUILD} || die "cp failed"
	if [ "${RMOLD}" == "yes" ]; then
		vcs_rm ${OLDEBUILD} ${OLDDIGEST}
	fi
fi
ebuild ${NEWEBUILD} digest || die "digest failed"
[ -f ${NEWDIGEST} ] || die "${NEWDIGEST} doesn't exist"
# Add to VCS
if [ "${OLDEBUILD}" != "${NEWEBUILD}" ]; then
	vcs_add ${NEWEBUILD} ${NEWDIGEST}
fi

# Open up the new ebuild and the configure.(in|ac) to check for new deps
cd ${TMPDIR} || die "No ${TMPDIR}"
duntarball ${DISTDIR}/${MY_P}.tar.bz2 || duntarball ${DISTDIR}/${MY_P}.tar.gz
${VIM} -O ${EBUILDDIR}/${NEWEBUILD} ${MY_P}/configure.*
if [ -n "${CHANGELOG}" ]; then
	# Want the changelog
	TEMPFILE=$(tempfile)
	cp ${MY_P}/ChangeLog ${TEMPFILE}
fi

rm -rf ${MY_P}
cd -

# Now re-digest in case the ebuild changed
ebuild ${NEWEBUILD} digest || die "digest failed"

if [ -n "${BUILD}" ]; then
	# We were told to build it
	emerge ${PN} || die "emerge failed"
fi

VCS_COMMITFILE=$(tempfile)
echo "Bump to ${PVR}" >> ${VCS_COMMITFILE}

if [ -n "${CHANGELOG}" ]; then
	${VIM} -O ${TEMPFILE} ${VCS_COMMITFILE}
	rm ${TEMPFILE}
fi

ECHANGELOG_EDITOR= echangelog-tng < ${VCS_COMMITFILE} || die "echangelog failed"
# Re-digest
ebuild ${NEWEBUILD} digest || die "digest failed"

if [ -n "${COMMIT}" ]; then
	# We were told to commit it
	# Uses VCS_COMMITFILE
	vcs_commit
fi

# Tell user we're done
notify-send -t 0 "Done" "${NEWEBUILD}"
