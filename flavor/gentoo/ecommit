#!/bin/bash
#
# Bump a package in an overlay
#

# Portage functions
source ${SCRIPTS}/functions.sh

#
# Default Local parameters
# Remove old versions?
RMOLD="yes"

# Set usage output
USAGE="[-hfpIn][-m <commitmsg>] [<commitmsg>]"
LONGUSAGE="\t-h\tPrint this help message
\t-f\tForce; pass -f to repoman.
\t-p\tPretend; don't actually commit.
\t-m <commitmsg>\tCommit message.
\t-I\tIgnore arches; pass -I to repoman.
\t-n\tDon't digest.  Pass if you've removed all ebuilds
\t<commitmsg>\tCommit message.  Overrides -m"

# Standard functions
source ${SCRIPTS}/functions.sh

# Parse arguments
while getopts ":hfpInm:" option; do
	case ${option} in
		p ) PRETEND="yes";;
		f ) VCS_REPOMAN_OPTS="${VCS_REPOMAN_OPTS} -f";;
		I ) VCS_REPOMAN_OPTS="${VCS_REPOMAN_OPTS} -I";;
		m ) VCS_COMMITMSG=${OPTARG};;
		n ) NODIGEST="yes";;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
fi

if [ -n "$*" ]; then
	VCS_COMMITMSG="$*"
fi

if [ -z "${VCS_COMMITMSG}" ]; then
	VCS_COMMITFILE=$(tempfile)
	${EDITOR:-vim} ${VCS_COMMITFILE}
fi

vcs_detect

if [ -n "${PRETEND}" ]; then
	echo "committing ${PWD} with message \"${VCS_COMMITMSG}\""
	vcs_status
	exit
fi

vcs_update_check_conflicts
EBUILDS=`vcs status | grep -v "^R" | grep -v "^D" | grep ebuild  | sed 's/#\s*//' | grep -v renamed | awk '{print $2}'`
vcs_echangelog
if [ -z "${NODIGEST}" ]; then
	if [ -z "${EBUILDS}" ]; then
		# Probably only removing things
		EBUILDS=`/bin/ls *.ebuild`
	fi
	if [ -z "${EBUILDS}" ]; then
		die "no ebuilds to digest?"
	fi
	for i in ${EBUILDS}; do
		ii=$(basename $i)
		ebuild $ii digest || die "digest failed"
	done
fi
vcs_commit
rm -f ${VCS_COMMITFILE}

# Tell user we're done
#notify-send -t 0 "Done" "${NEWEBUILD}"
