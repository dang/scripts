#!/bin/bash
#
# Run VCS commands.  Abstracts away the actual VCS being used.  Currently
# available: add, remove, commit
#

# Do it for real
PRETEND="no"
# Default commit message
VCS_COMMITMSG="Forgot the commit message"

# Set usage output
USAGE="[-hp] <command>"
LONGUSAGE="\t-h\tPrint this help message
\t-p\tPretend
\t<command>\t Command to run.
\tAvailable commands:
\t\tadd <files>\tAdd file(s) to the VCS
\t\trm <files>\tRemove file(s) from the VCS and the filesystem
\t\tcommit [-h] [-m <commitmsg>] [-F <file>] [<files>]\tCommit to the VCS
\t\tup [<files>]\tUpdate files
\t\tstatus [<files>]\tGet status on files
\t\tdiff [<files>]\tDiff files
\t\tmv <source> <dest>\tmove a file
\t\trevert [<files>]\trevert to last checked in state
\t\tcp <source> <dest>\tcopy a file"

# Standard functions
source ${HOME}/.scripts/functions.sh

# Parse arguments
while getopts ":hp" option; do
	case ${option} in
		p ) PRETEND="yes";;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
	OPTIND=1
fi

# Get command
if [ -z "$1" ]; then
	usage "No command"
else
	CMD="$1"
	shift 1
fi

# Process command line based on command
case "${CMD}" in
	add|rm)
		if [ -z "$*" ]; then
			usage "${CMD} needs file(s)"
		fi
		FILES="$@"
		;;
	commit)
		while getopts ":hm:F:" option; do
			case ${option} in
				m ) VCS_COMMITMSG=${OPTARG};;
				F ) VCS_COMMITFILE=${OPTARG};;
				h ) usage;;
				\? ) usage "Invalid argument ${OPTARG}";;
				* ) usage "Invalid argument ${option}";;
			esac
		done

		if [ "${OPTIND}" != "0" ]; then
			shift $((OPTIND-1))
		fi
		if [ -n "$*" ]; then
			FILES="$@"
		fi
		;;
	up)
		;;
	status|diff|revert|annotate|log)
		FILES="$@"
		;;
	mv|cp)
		if [ -z "$1" ]; then
			usage "${CMD} needs files"
		fi
		if [ -z "$2" ]; then
			usage "${CMD} needs files"
		fi
		;;
	*)
		usage "Unknown command ${CMD}"
		;;
esac

# Detect the vcs
PORTDIR="."
vcs_detect

# Run the command
case "${CMD}" in
	add)
		if [ "${PRETEND}" == "yes" ]; then
			echo vcs_add ${FILES}
		else
			vcs_add ${FILES}
		fi
		;;
	rm)
		if [ "${PRETEND}" == "yes" ]; then
			echo vcs_rm ${FILES}
		else
			vcs_rm ${FILES}
		fi
		;;
	commit)
		if [ "${PRETEND}" == "yes" ]; then
			if [ -n "${VCS_COMMITFILE}" ]; then
				echo "vcs_commit -F ${VCS_COMMITFILE} ${FILES}"
			else
				echo "vcs_commit -m \"${VCS_COMMITMSG}\" ${FILES}"
			fi
		else
			vcs_commit ${FILES}
		fi
		;;
	up)
		if [ "${PRETEND}" == "yes" ]; then
			echo vcs_update ${FILES}
		else
			vcs_update ${FILES}
		fi
		;;
	status)
		vcs_status ${FILES}
		;;
	diff)
		vcs_diff ${FILES}
		;;
	revert)
		vcs_revert ${FILES}
		;;
	annotate)
		vcs_annotate ${FILES}
		;;
	log)
		vcs_log ${FILES}
		;;
	mv)
		if [ "${PRETEND}" == "yes" ]; then
			echo vcs_mv ${@}
		else
			vcs_mv ${@}
		fi
		;;
	cp)
		if [ "${PRETEND}" == "yes" ]; then
			echo vcs_cp ${@}
		else
			vcs_cp ${@}
		fi
		;;
esac

